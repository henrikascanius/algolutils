;      <* tcom, translate with connect.no *>
begin
   integer i,j,p,proglen,len,sep,hw,t,level;
   boolean sp;
   integer array field iaf;
   integer array ia(1:10);
   long array la(1:8);
   integer array tilst,act(1:11,1:12);
   array a(1:512);
   

   integer procedure system(f,i,la);
   value f; integer f,i; long array la;
    system:=xsystem(f,i,la);

    
   procedure err(s);
   string s;
   begin
      long array name(1:2);

      system(2,0,name);
      write(out,<:*** :>,name,<:: :>,s,"nl",1);
      trapmode:=-1;
      trap(1);
   end;



   procedure parse(a,iaf,s,t,tilst,level,act);
   value t; array a; integer array field iaf; long array s; integer t,level;
   integer array tilst,act;

   begin  <* fp command parser *>
      integer pos,ch,txtpos,num,base,sep,kind;
      long array txt(1:2);
      boolean neg;



      procedure action(act,ch);
      value act,ch; integer act,ch;

      begin
         if act<0 then err(<:syntax error in command:>);
         if act=0 then else

         case act of
         begin

            begin  <* 1: afslut <text> *>
               putchar(txt,txtpos+0,0,13-txtpos);
               a.iaf(1):=sep shift 12+10;
               iaf:=iaf+2;
               tofrom(a.iaf,txt,8);
               iaf:=iaf+8;
            end;

            begin  <* 2: afslut <tal> *>
               a.iaf(1):=sep shift 12+4;
               a.iaf(2):=if neg then (-num) else num;
               iaf:=iaf+4;
            end;

            begin  <* 3: ( *>
               level:=level+1;
            end;

            begin  <* 4: ) *>
               level:=level-1;
               if level<0 then err(<:) improper:>);
               a.iaf(1):=-2 shift 12+2;
               iaf:=iaf+2;
            end;

            begin  <* 5: <text>) *>
               action(1,ch);
               action(4,ch);
            end;

            begin  <* 6: <tal>) *>
               action(2,ch);
               action(4,ch);
            end;

            begin  <* 7: ':' *>
               base:=num;
               num:=0;
               if base<1 or base>10 or neg then err(<:illegal number base:>);
            end;

            begin  <* 8: init par. *>
               num:=0;
               base:=10;
               neg:=false;
               txtpos:=1;
               sep:=case t of (2,0,4,8,0,0,0,0,0,6);
            end;

            begin  <* 9: init num. *>
               action(8,ch);
            end;

            begin  <* 10: text part *>
               putchar(txt,txtpos,ch);
               if txtpos>12 then err(<:name too long:>);
            end;

            begin  <* 11: digit *>
               if ch-'0'>=base then err(<:illegal digit:>);
               if t=11 or t=12 then neg:=true;
               num:=num*base+(ch-'0');
            end;

            begin  <* 12: first letter *>
               action(8,ch);
               action(10,ch);
            end;

            begin  <* 13: first digit *>
               action(9,ch);
               action(11,ch);
            end;

         end case;

      end local proc. action;
      



      pos:=1;

      repeat
         getchar(s,pos,ch);
         kind:=if ch=0 or ch='/' then 1 else
               if ch='(' then 2 else
               if ch=' ' then 3 else
               if ch='.' then 4 else
               if ch=')' then 5 else
               if ch=':' then 6 else
               if ch=''' then 7 else
               if ch='=' then 10 else
               if ch='-' then 11 else
               if ch>='a' and ch<='}' then 8 else
               if ch>='0' and ch<='9' then 9 else -1;

         if kind<0 then err(<:illegal char:>);

         action(act(kind,t),ch);
         t:=tilst(kind,t);

      until ch=0;
      
   end proc. parse;





   proglen:=110;
   iaf:=0;
   for i:=1 step 1 until proglen shift (-1) do
       a.iaf(i):=case i of(<:com:> shift (-24) extract 24, proglen,
         -2129826,         
          6127704,         
          2981990,       
         -5361664,               
          3440660,         
          5013610,       
         -5767162,             
          2981970,             
         -2613244,             
         -2355196,             
         -2613240,             
         -2355192,             
          5251082,            
          6033418,            
          5373954,             
          4988929,             
         -5505024,             
          3440646,          
          4849665,             
          3444728,          
         -2195408,         
          2162692,             
          5406770,         
          1900548,             
         -2613246,             
         -2355198,             
         -2613242,             
         -2355194,             
          5251080,             
          6033416,             
          2408478,            
          6094940,            
          3088394,            
          5406742,         
          3026942,             
          3096574,             
          5251072,               
          6041600,               
         -5586934,         
          3444726,         
          5341194,         
          3014656,             
          3608624,            
                0,             
                0,             
                0,             
                0,             
                0,             
             8202,            
                0,             
                0,             
                0,             
                0
       );

<* tilstands- og aktionstabel for fp-kommandoparser.
   tilstande:
              1: efter NL
              2: efter (
              3: efter SP
              4: efter .
              5: efter )
              6: i <tekst>
              7: i <tal>
              8: efter <tal>:
              9: i <tal> efter :
             10: efter =
             11: efter -
             12: efter :-
*>


   for i:=1 step 1 until 11 do
   for j:=1 step 1 until 12 do
   begin
      
      tilst(i,j):=case i of(
<* tegn        tilstand:   1   2   3   4   5   6   7   8   9  10  11  12   *>

<* / 'nl' *> (case j of (  1,  1,  1, -1,  1,  1,  1, -1,  1, -1, -1, -1  )),
<*  (     *> (case j of (  2,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1  )),
<*  'sp'  *> (case j of (  1,  2,  3,  4,  5,  3,  3, -1,  3, -1, -1, -1  )),
<*  .     *> (case j of ( -1, -1,  4, -1, -1,  4,  4, -1,  4, -1, -1, -1  )),
<*  )     *> (case j of (  5,  5,  5, -1,  5,  5,  5, -1,  5, -1, -1, -1  )),
<*  :     *> (case j of ( -1, -1, -1, -1, -1, -1,  8, -1, -1, -1, -1, -1  )),
<*  '     *> (case j of (  6,  6,  6,  6, -1, -1, -1, -1, -1,  6, -1, -1  )),
<*  bogst *> (case j of (  6,  6,  6,  6, -1,  6, -1, -1, -1,  6, -1, -1  )),
<* ciffer *> (case j of (  7,  7,  7,  7, -1,  6,  7,  9,  9, -1,  7,  9  )),
<*  =     *> (case j of ( -1, -1, 10, -1, -1, 10, 10, -1, 10, -1, -1, -1  )),
<*  -     *> (case j of ( 11, 11, 11, 11, -1, -1, -1, 12, -1, -1, -1, -1  )));
             

      act(i,j):=case i of(
<* tegn        tilstand:   1   2   3   4   5   6   7   8   9  10  11  12   *>

<* / 'nl' *> (case j of (  0,  0,  0, -1,  0,  1,  2, -1,  2, -1, -1, -1  )),
<*  (     *> (case j of (  3,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1  )),
<*  'sp'  *> (case j of (  0,  0,  0,  0,  0,  1,  2, -1,  2, -1, -1, -1  )),
<*  .     *> (case j of ( -1, -1,  0, -1, -1,  1,  2, -1,  2, -1, -1, -1  )),
<*  )     *> (case j of (  4,  4,  4, -1,  4,  5,  6, -1,  6, -1, -1, -1  )),
<*  :     *> (case j of ( -1, -1, -1, -1, -1, -1,  7, -1, -1, -1, -1, -1  )),
<*  '     *> (case j of (  8,  8,  8,  8, -1, -1, -1, -1, -1,  8, -1, -1  )),
<*  bogst *> (case j of ( 12, 12, 12, 12, -1, 10, -1, -1, -1, 12, -1, -1  )),
<* ciffer *> (case j of ( 13, 13, 13, 13, -1, 10, 11, 11, 11, -1, 11, 11  )),
<*  =     *> (case j of ( -1, -1,  0, -1, -1,  1,  2, -1,  2, -1, -1, -1  )),
<*  -     *> (case j of (  9,  9,  9,  9, -1, -1, -1,  0, -1, -1, -1, -1  )));

   end;

   if system(4,1,la) shift (-12) <> 6 then 
   begin   <* display contents of command *>
      zone z(512,1,stderror);

      open(z,4,la,0);  <* 'la' may contain num. param *>
      i:=monitor(42,z,0,ia);  <* ... and the lookup will fail! *>
      if i=0 and ia(9) shift (-12)<>2 then i:=-1;  <* check content key *>
      if i=0 then
      begin  <* name describes a binary program *>
         inrec6(z,4);
         if z(1) shift (-24)<>real <:com:> shift (-24) then i:=-2;
      end;
      if i<>0 then err(<:not a command:>);

      iaf:=z(1) extract 24;
      changerec6(z,ia(10));
      if z.iaf(1) shift (-12)<>2 then write(out,<:<'nl'>*:>);

      repeat
         i:=z.iaf(1) shift (-12) shift 12 //8192+2;
         outchar(out,case i of (')','(','nl','sp','=','.'));
         if i=3 then outchar(out,'*');
         i:=z.iaf(1) extract 12-2;
         iaf:=iaf+2;
         if i=2 then write(out,<<d>,z.iaf(1)) else write(out,z.iaf);
         iaf:=iaf+i;
      until z.iaf(1)=0;

      write(out,"nl",2);
      close(z,true);

   end else

   begin  <* create command *>
   

      iaf:=proglen;
      p:=2;
      level:=0;
      for i:=system(4,p,la) while i<>0 do
      begin
         sep:=i shift (-12);
         hw:=i extract 12-2;

         if hw<=8 then
         begin  <* normal fp-param. *>
            a.iaf(1):=i;
            iaf:=iaf+2;
            if hw=2 then a.iaf(1):=la(1) else tofrom(a.iaf,la,8);
            iaf:=iaf+hw;
         end else

         begin  <* general text, convert to internal fp-repr. *>
            t:=if p=2 then 1 else case sep//2 of (1,3,10,4);  <* init. tilstand *>
            parse(a,iaf,la,t,tilst,level,act);
         end;

         p:=p+1;

      end;

      if p=2 then err(<:no command:>);
      if level<>0 then err(<:) missing:>);
      a.iaf(1):=0;
      len:=iaf+2;

      iaf:=proglen;

      <* inds. evt. NL forrest *>
      if a.iaf(1) shift (-12)=4 then a.iaf(1):=2 shift 12+a.iaf(1) extract 12;
   
      <* check kommandostruktur *>

      repeat
         sep:=a.iaf(1)//4096;
         hw:=a.iaf(1) extract 12;

         if sep<4 then
         begin
            sp:=false;
            i:=0;
         end else
         begin
            i:=i+1;
            if sep=4 then sp:=true;
         end;

         if sep=6 and i<>1 then err(<:misplaced =:>);
         if sep=8 and -,sp then err(<:misplaced .:>);
         if -,sp and hw=4 then err(<:misplaced number:>);

         iaf:=iaf+hw;

      until a.iaf(1)=0;

      ia(1):=(len+511) shift (-9);
      for i:=2,3,4,5,7,8 do ia(i):=0;
      ia(6):=systime(7,0,0.0);
      ia(9):=2 shift 12+4;
      ia(10):=len;

      begin
         zone z(ia(1) shift 7,1,stderror);

         system(4,0,la);
         open(z,4,la,0);
         i:=monitor(40,z,0,ia);
         if i=3 then i:=monitor(44,z,0,ia);
         if i<>0 then err(<: cannot create file:>);
         outrec6(z,len);
         tofrom(z,a,len);
         close(z,true);
      end;

   end create command;

   trapmode:=1 shift 10;

end
