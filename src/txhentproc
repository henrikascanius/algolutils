external
integer procedure xhentproc(z,zterm,op,wrk,max_6_tegn);
value op,max_6_tegn; zone z,zterm; integer op,max_6_tegn; array wrk;

begin
   integer max_8_tegn,max_8;

   max_8_tegn:=(max_6_tegn-3)//4*3;
   max_8:=max_8_tegn//3*2+1;
   
   begin
      integer field bloknr,comp,lgd_buf6,itf;
      long array field buf6;
      long array buf8(1:max_8);
      integer antal_8_tegn,i,k,sum,tegn;
      long field lf;



      integer procedure indl{s(z,buf);
      zone z; long array buf;

      begin
         integer tegn,i;

         i:=1;
         while i<=max_8_tegn and wrk.comp<>'em' do
         begin
            tegn:=wrk.comp;
            if tegn=0 then
            begin
               readchar(z,tegn);
               if tegn='nl' then
               begin
                  wrk.comp:='nl';
                  tegn:='cr';
               end else if tegn='em' then wrk.comp:='em';
            end else wrk.comp:=0;
            if tegn<>'em' then putchar(buf,i,tegn);
         end;
   
         indl{s:=i-1;

      end proc. indl{s;


     integer procedure konverter_8_6(antal_8_tegn,buf_8,buf_6);
     value                           antal_8_tegn             ;
     integer                         antal_8_tegn             ;
     long array                                   buf_8,buf_6 ;

     begin
       integer antal, fsh, tsh, t, i, checksum;
       integer field ffv, tfv, if2;

       if2:=2;
       antal := antal_8_tegn//3*4;
       if antal_8_tegn mod 3 <> 0 then antal := antal + (antal_8_tegn mod 3)+1;
       tfv := 2;  <* reserver plads til checksum og l|benr *>
       tsh := ffv := fsh := checksum :=0;
       for i:=1 step 1 until antal do
       begin
         fsh := fsh + 6;
         if 0 < fsh then
         begin
           fsh := -18;
           ffv := ffv + 2;
         end;
         t := (buf_8.ffv shift fsh extract 6) + 33;
         checksum := checksum + t;

         tsh := tsh - 8;
         if tsh < 0 then
         begin
           tsh := 16;
           tfv := tfv + 2;
           buf_6.tfv := 0;
         end;
         buf_6.tfv := buf_6.tfv + t shift tsh;
       end;

       wrk.bloknr := wrk.bloknr + 1;
       t := wrk.bloknr mod 10 + '0';
       checksum := checksum + t;
       buf_6.if2 := (checksum//10 mod 10 + '0') shift 16 +
                    (checksum     mod 10 + '0') shift 8  +
                    t <* = bloknr *>                     ;
       konverter_8_6 := tfv;

     end proc. konverter_8_6;




      comp:=2;
      lgd_buf6:=4;;
      bloknr:=6;
      buf_6:=6;

      xhentproc:=0;

      if op=0 then
         write(zterm,"esc" add 128,1,"A",1) else
      
      if op=1 then
      begin
         write(zterm,<:ok:>);
         wrk.bloknr:=wrk.comp:=wrk.lgd_buf6:=0;
         xhentproc:=1;
      end else

      begin
         if op='+' or (op='-' and wrk.lgd_buf6=0) then
         begin
            antal_8_tegn:=indl{s(z,buf_8);
            if antal_8_tegn=0 then
            begin   <* slut, dan checkpost *>
               sum:='s';
               k:=wrk.bloknr;
               lf:=6;
               wrk.buf_6.lf:=0;
               for i:=0 step 8 until 40 do
               begin
                  tegn:=k mod 10+'0';
                  wrk.buf_6.lf:=wrk.buf_6.lf+extend tegn shift i;
                  sum:=sum+tegn;
                  k:=k//10;
               end;
               itf:=2;
               wrk.buf_6.itf:=<:00s:> shift (-24) extract 24 +
                          (sum//10 mod 10) shift 16 +
                          (sum     mod 10) shift 8;
               wrk.lgd_buf6:=6;
               xhentproc:=2;
            end else wrk.lgd_buf6:=konverter_8_6(antal_8_tegn,buf_8,wrk.buf_6);

         end;

         if op='<' or op='>' then xhentproc:=2 else
         begin
            lf:=wrk.lgd_buf6+4;
            wrk.buf6.lf:=0;
            write(zterm,wrk.buf6);
         end;

      end;

   end;
end proc. xhent;
end
