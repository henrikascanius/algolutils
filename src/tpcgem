pcgem=algol connect.no
begin
  <***************************************
   *          PCHENT 871021/hj           *
   *   (baseret p} DATANI A/S's xgem     *
   ***************************************>

   integer max_buf;
   long sum,cnt;
   boolean bindestreg;
   long array ny_buf(1:128),doc(1:2);
   boolean afslut;
   integer k, n, i, antal, t,bloknr , checksum, ok_sum;
   long array field laf,laf0;
   integer field ifv;
   real    array ra(1 : 2);
   integer array ia(1:20);
   boolean         ok;
   zone z(128,1,tproc);
   zone zout(128,1,stderror);
   

   procedure tproc(z,s,b);
   zone z; integer s,b;

   if false add s then stderror(z,s,b) else
   begin  <* status 'att' means data overrun. simulate short block *>
      z(1):=real <::>;
      b:=2;
   end;

   

   integer procedure konverter_6_8(gl_buf,ny_buf,max_buf,checksum);
   value                                         max_buf ;
   integer                                       max_buf,checksum ;
   long array                      gl_buf,ny_buf         ;
   begin
      integer t, tsh, fsh, antal, sum;
      integer field tfv, ffv;
      for tfv:=2 step 2 until max_buf do ny_buf.tfv := 0;
      tsh := tfv := fsh := ffv := antal := sum := 0;
      repeat
         fsh := fsh + 8;
         if 0 < fsh then
         begin
            fsh := -16;
            ffv := ffv + 2;
         end;
         t := gl_buf.ffv shift fsh extract 8;
         if 'sp' < t then
         begin
            antal := antal + 1;
            sum := (sum + t) mod 100;
            if t = 33+63+1 then t := '"' else
            if t = 33+63+2 then t := "'" extract 8 else
            if t = 33+63+3 then t := '?' else
            if t = 33+63+4 then t := '^' ;
            tsh := tsh - 6;
            if tsh < 0 then
            begin
               tsh := 18;
               tfv := tfv + 2;
            end;
            ny_buf.tfv := ny_buf.tfv + (t-33)shift tsh;
         end;
      until t <= 'sp';
      konverter_6_8 := antal/4*3;
      
      checksum := sum;
      
   end;
   <* proc. konverter_6_8... *>
   
   
   max_buf := 512;
   laf0 := 0;
   bindestreg := false;
   afslut := false;
   bloknr := 0;
   sum:=cnt:=0;
   doc(1):=0;

   system(7,0,ra);  <* get primary outp. procname *>
   open(z,8,ra,1 shift 16);  <* call blockproc. on 'att' (data overrun) *>
   write(z,"esc" add 128,1,"B",1);
   setposition(z,0,0);   <* initiate transfer on remote computer *>

   ok := true;
   ra(1):=ra(2):=real <::>;
   readchar(z,i);  repeatchar(z);

   if i>='a' and i<='z' then readstring(z,ra,1);
   if ra(1)<>real <:xgem:> then k:=-1 else
   begin
      k := system(4,1,ra);    <* get filename, if present *>
      if k <> 0 then
      begin  <* get optional docname *>
         if system(4,2,doc)<>8 shift 12+10 then doc(1):=0;
      end;
      if k=4 shift 12+10 then k:=0 else
      if k=0 then readstring(z,ra,1);
   end;

   setposition(z,0,0);
   
   if k = 0 then
   begin
      open(zout,4,ra.laf0,0);
      k := monitor(52<* create area process *>,zout,0,ia);
      if k = 0 then
      k := monitor(8<* reserve process *>,zout,0,ia);
      if k = 0 then
      begin
         k:=monitor(42,zout,0,ia);
         if k=0 then
         begin <* change entry *>
            ia(6):=systime(7,0,0.0);
            ia(10):=0;
            monitor(44,zout,0,ia);
         end;
      end else

      begin           <* ny entry oprettes *>
         zone zdoc(1,1,stderror);
         integer array field iaf;

         iaf:=2;
         open(zdoc,0,<:pcgemdoc:>,0);
         if doc(1)<>0 then tofrom(ia.iaf,doc,8) else
         if monitor(42,zdoc,0,ia)<>0 then for i:=2,3,4,5 do ia(i):=0;
         
         for i := 7 step 1 until 10 do ia(i) := 0;
         ia(1) := 1;
         ia(6) := systime(7,0,0.0);
         
         k := monitor(40 <*create entry *>,zout,0,ia);

         if k = 0 then
         _   k := monitor(50,zout,3,ia);  <* permanent *>

         system(11,0,ia);   <* get proc. bases *>
         ia(1):=ia(5);  ia(2):=ia(6);  <* user bases *>

         if k = 0 then
         _   k := monitor(74,zout,0,ia);  <* set entry bases *>

         if k = 0 then
         _   k := monitor(52,zout,0,ia);
         
         
         if k = 0 then
         _   k := monitor(8,zout,0,ia);
         
      end ny entry oprettes;
      
      if k <> 0 then
      begin
         
         write(z,<:modtageromr}de p} RC 8000 kan ikke oprettes:>);
         setposition(z,0,0);
         ok := false;
         
      end;
      
   end
   else
   begin
      
      write(z,<:pcgem anulleret<10>:>);
      setposition(z,0,0);
      ok := false;
      
   end;
   
   if ok then
   begin
      
      write(z,<:+:> <* acknowledge *>);
      setposition(z,0,0);
      
      
      
      repeat
         k := inrec6(z,0);
         inrec6(z,k);
         ifv := 2;
         n   := if ifv<=k then z.ifv else 0;
         
         if n = <:b ":> shift(-24) extract 24 and 4 < k then
         begin
            laf := 4;
            antal := konverter_6_8(z.laf,ny_buf,max_buf,check_sum);
            ifv := 4;
            k := z.ifv;

            check_sum := (check_sum + k extract 8) mod 100;
            
            if ((k shift(-16) - '0') * 10 + (k shift(-8)) extract 8 - '0') 
            _                                          = check_sum then
            begin
               
               if (blok_nr + 1) mod 10 = ( k extract 8) - '0' then
               begin <* ok *>
                  
                  ifv := k := 0;
                  for i:=1 step 1 until antal do
                  begin
                     k := k + 8;
                     if 0 < k then
                     begin
                        k := -16;
                        ifv := ifv + 2;
                     end;
                     t := ny_buf.ifv shift k extract 7;
                     if t = 'cr' and bindestreg then
                     begin
                        outchar(zout,'-');
                        cnt:=cnt+1;
                        sum:=sum+'-';
                     end;
                     if 'sp' <= t or t = 'nl' or t = 'ht' or t = 'ff' then
                     begin
                        outchar(zout,t);
                        cnt:=cnt+1;
                        sum:=sum+t;
                     end;
                     bindestreg := t = 31;
                  end;

                  blok_nr := blok_nr + 1;
                  
                  setposition(z,0,0);
                  write(z,<:+:>);
                  setposition(z,0,0);
                  
               end 
               else
               if blok_nr mod 10 = (k extract 8) - '0' and 0 < blok_nr then
               begin <* samme blok modtaget igen, ok *>
                  setposition(z,0,0);
                  write(z,<:+:>);
                  setposition(z,0,0);
               end 
               else
               begin
                  setposition(z,0,0);
                  write(z,">",1);
                  setposition(z,0,0);
                  afslut := true;
                  ok:=false;
               end;
               
            end 
            else
            begin
               
               setposition(z,0,0);
               write(z,<:-:>) <* checksumfejl *>;
               setposition(z,0,0);
               
            end;
         end
         else
         if n shift(-8) = <:ok:> shift(-32) extract  16 then
         begin
            get_number(z,3,<<d >,ok_sum);
            afslut := true
         end else
         begin
            
            setposition(z,0,0);
            write(z,<:-:>);
            setposition(z,0,0);
            
         end;
         
      until afslut;
      
      if ok then
      begin
         write(zout,"em",3);
         close(zout,false);
         getposition(zout,0,n);
         k := monitor(42,zout,0,ia);
      
         if k = 0 then
         begin
         
            ia(1) := n;
            if ok_sum>0 then ia(10):=cnt;
            monitor(44 <* change entry *>,zout,0,ia);
            monitor(64,zout,0,ia);  <* remove process *>
            setposition(z,0,0);
            if oksum=0 then else
            if oksum<>blok_nr then write(z,"bel" add 128,1,
                  <:*** forkert antal blokke, :>,
                  <:modtaget::>,blok_nr,<:  forventet::>,oksum,"nl",1) else
               write(z,"bel" add 128,1,ra.laf0,cnt,"/",1,<<d>,sum,"nl",1);
            close(z,false);

         end;

      end if ok;
      
   end if ok;
   
   trapmode := 1 shift 10;
end;
