(setterm=algol connect.no
end)
****************************************
*     rc8000 terminal configurator     *
*             840127   hj              *
*      vers.2 871207   hj              *
*    for monitor 12.0, MIPS/TS 7.1     *
****************************************

begin
   integer i,pno,func,tpno;
   integer array sia(1:12),td(1:10);
   zone z(1,1,stderror);
   boolean term_def,own_term,sos,b;
   long array parm(1:2),pname(1:2);
   array errtxt(1:5);

   procedure testarg(sep,len);
   value sep,len; integer sep,len;

   begin
      integer i,p;

      if len>0 then
      begin
         pno:=pno+1;
         p:=system(4,pno,parm);
      end;

      if p<>sep shift 12+len then
      begin
         system(2,0,pname);
         i:=1;
         write(out,string pname(increase(i)));
         i:=1;
         write(out,string errtxt(increase(i)));
         i:=1;
         if p extract 12=4 then write(out,parm(i)) else
                                write(out,string parm(increase(i)));
         outchar(out,'nl');
         trapmode:=1 shift 13;
         trap(1);
      end;
   end proc. testarg;



   long procedure yn(b);
   value b; integer b;

   yn:=long (if b extract 1=1 then <:yes:> else <:no:>);



   boolean procedure testboolarg;

   begin
      testarg(8,10);
      if parm(1)=long <:yes:> then testboolarg:=true else
      if parm(1)=long <:no:>  then testboolarg:=false else
      testarg(0,-1);
   end proc. testboolarg;



   integer procedure rate(r);
   value r; integer r;

   rate:=case r+1 of (9600,4800,2400,1200,600,300,220,200,150,134,110,75,50,40);



   integer procedure getrate(r);
   value r; integer r;

   begin
      integer i;

      for i:=-1,i while rate(i)<>r and i<13 do i:=i+1;
      if rate(i)<>r then testarg(0,-1);
      getrate:=i;
   end proc. getrate;



   procedure setparm(w,bits,sh,parm);
   value w,bits,sh,parm; integer w,bits,sh,parm;

   begin
      if -,termdef then getterm;
      td(w):=td(w)-td(w) shift (-sh) extract bits shift sh
               +parm extract bits shift sh;
   end;



   procedure termop(op);
   value op; integer op;

   begin
      integer i,j;
      integer array ia,zia(1:20);
      long array pname,tname(1:2);
      long array field laf;
      
      if -,own_term then
      begin
         ia(1):=0;
         if monitor(28,z,i,ia)<>0 then i:=-1 else
         if false add i then i:=0 else
         begin  <* is not user *>
            ia(1):=14 shift 12;  <* parent message: mount *>
            getzone6(z,zia);
            for i:=1,2,3,4 do ia(i+4):=zia(i+1);  <* transf. name *>
            system(10,0,ia);  <* send parent message *>
            i:=0;
         end;
      end else i:=0;

      if i<0 then else
      begin
         getshare6(z,sia,1);
         sia(4):=op;
         for i:=5,6,7,8,9,10,11 do sia(i):=td(i-3);
         setshare6(z,sia,1);
         if monitor(16,z,1,td)=0 then system(9,6,<:break:>);
         i:=monitor(18,z,1,td);
      end;

      if i<>1 then
      begin
         system(2,0,pname);
         write(out,pname,if i<0 or i=5 then <: terminal unknown: :> else
                         if i<5 then
                        (case i-1 of (<: terminal reject: :>,
                                      <: terminal message unintelligible: :>,
                                      <: terminal malfunction: :>
                                      )) else <:failed: :>);
         getzone6(z,zia);
         laf:=2;
         write(out,zia.laf,"nl",1);
         trapmode:=1 shift 13;
         trap(1);

      end;

   end proc. termop;



   procedure getterm;

   begin
      integer kind,pda,i;
      long array tname(1:2);

      if -,termdef then
      begin
         close(z,false);
         pda:=system(7,kind,tname);
         open(z,0,tname,0);
      end;

      termop(134 shift 12);
      termdef:=true;

   end proc. getterm;



   procedure setterm;

   if termdef then termop(132 shift 12);






   termdef:=false;
   own_term:=true;
   tpno:=0;
   movestring(errtxt,1,<: param: :>);

   for pno:=0,pno while system(4,pno+1,parm)<>0 do
   begin
      testarg(4,10);
      for func:=1,func+1 while -,b and func<=17 do
       b:=parm(1)=long (case func of 
         (<:term:>,<:what:>,<:conv:>,<:cont:>,<:echo:>,<:softp:>,<:type:>,
          <:disat:> add 't',<:promp:> add 't',<:timer:>,<:fc:>,<:stop:>,
          <:parit:> add 'y',<:clen:>,<:rrate:>,<:trate:>,<:rate:>));

      if -,b then testarg(0,-1);
      func:=func-1;

      case func of
      begin

         begin  <* term *>
            setterm;
            testarg(8,10);
            close(z,false);
            i:=1;
            open(z,0,string parm(increase(i)),0);
            i:=monitor(4,z,0,td);
            if i<>0 then
            begin
               system(5,76,td);
               system(5,td(1),td);
               if i>td(1) then i:=0 else system(5,i,td);
            end;
            if i=0 or td(1)=0 then
            begin
               movestring(errtxt,1,<: terminal unkown: :>);
               testarg(0,-1);
            end;

            termdef:=true;
            ownterm:=false;
            getterm;
            tpno:=pno;
         end term;

         begin  <* what *>
            integer sp;
            array pname,tname(1:2);
            integer array zia(0:19);

            setterm;
            getterm;
            system(2,0,pname);
            i:=1;
            sp:=1+write(out,"nl",1,string pname(increase(i)));
            getzone6(z,zia);
            tofrom(tname,zia,8);
            i:=1;

            write(out,<:  term.:>,string tname(increase(i)),<:  conv.:>,
                  string yn(td(2) shift (-15)),<:  cont.:>,
                  string yn(td(2) shift (-13)),<:  echo.:>,
                  string yn(td(2) shift (-11)),<:  softp.:>,
                  string yn(td(2) shift (-10)),<:  type.:>,
                  <<d>,td(2) extract 10,",",1,"nl",1,"sp",sp,
                  <:disatt.:>,string yn(td(3) shift (-21)),
                  <:  prompt.:>,td(4) shift (-8) extract 8,
                  <:  timer.:>,td(7) shift (-8),
                  <:  fc.:>,td(8) shift (-13) extract 2,
                  <:  stop.:>,td(8) shift (-12) extract 1+1,",",1,"nl",1,"sp",sp,
                  <:parity.:>,case td(8) shift (-10) extract 2 +1 of
                  (<:odd:>,<:even:>,<:no:>,<:?:>),
                  <:  clen.:>,case td(8) shift (-8) extract 2 +1 of (5,7,6,8),
                  <:  rrate.:>,rate(td(8) shift (-4) extract 4),
                  <:  trate.:>,rate(td(8) extract 4),"nl",1);

         end what;

         begin  <* conv *>
            b:=testboolarg;
            setparm(2,1,15,b extract 1);
         end conv;

         begin  <* cont *>
            b:=testboolarg;
            setparm(2,1,13,b extract 1);
         end cont;

         begin  <* echo *>
            b:=testboolarg;
            setparm(2,1,11,b extract 1);
         end echo;

         begin  <* softp *>
            b:=testboolarg;
            setparm(2,1,10,b extract 1);
         end softp;

         begin  <* type *>
            testarg(8,4);
            setparm(2,10,0,parm(1) extract 10);
         end type;

         begin  <* disatt *>
            b:=testboolarg;
            setparm(3,1,21,b extract 1);
         end disatt;

         begin  <* prompt *>
            testarg(8,4);
            setparm(4,8,8,parm(1) extract 8);
         end prompt;

         begin  <* timer *>
            testarg(8,4);
            setparm(7,16,8,parm(1) extract 16);
         end;

         begin  <* fc *>
            testarg(8,4);
            if parm(1)<0 or parm(1)>3 then testarg(0,-1);
            setparm(8,2,13,parm(1) extract 2);
         end fc;

         begin  <* stop *>
            testarg(8,4);
            if parm(1)<1 or parm(1)>2 then testarg(0,-1);
            setparm(8,1,12,parm(1) shift (-1) extract 1);
         end;

         begin  <* parity *>
            testarg(8,10);
            i:=if parm(1)=long <:odd:> then 0 else
               if parm(1)=long <:even:> then 1 else
               if parm(1)=long <:no:> then 2 else -1;
            if i<0 then testarg(0,-1);
            setparm(8,2,10,i);
         end parity;

         begin  <* clen *>
            testarg(8,4);
            if parm(1)<5 or parm(1)>8 then testarg(0,-1);
            setparm(8,2,8,(case parm(1)-4 of (0,2,1,3)));
         end clen;

         begin  <* rrate *>
            testarg(8,4);
            i:=getrate(parm(1) extract 24);
            setparm(8,4,4,i);
         end rrate;

         begin  <* trate *>
            testarg(8,4);
            i:=getrate(parm(1) extract 24);
            setparm(8,4,0,i);
         end trate;

         begin  <* rate *>
            testarg(8,4);
            i:=getrate(parm(1) extract 24);
            setparm(8,4,4,i);
            setparm(8,4,0,i);
         end rate;

      end case func of;

   end;

   setterm;
   trapmode:=1 shift 10;

end
