begin   <* magread/magwrite   8609/hj *>
        <* suspend, release, rewind, unload-param.     8901/hj *>
   integer lrecl,bfactor,phrecl,conv,fileno,pno,spec,blsize,trail,chperbl,i;
   boolean trunc,wr,suspend,rewind,unload,scan;
   long array tname,fname,progname,empty,la(1:2);



   procedure ebcdictable(a);
   integer array a;

   begin
      integer i;


      for i:=0 step 1 until 255 do a(i):=case (i+1) of (
0,1,2,3,0,9,0,127,0,0,0,11,12,13,14,15,16,17,18,0,0,0,8,0,24,25,
0,0,0,0,0,0,0,0,28,0,0,10,23,27,0,0,0,0,0,5,6,7,0,0,22,0,0,30,0,4,0,0,0,0,
20,21,0,26,32,0,0,0,0,0,0,0,0,0,0,46,60,40,43,33,38,0,0,0,0,0,0,0,0,0,
33,93,42,41,59,0,45,47,0,0,0,0,0,0,0,0,0,44,124,95,62,63,0,0,0,0,0,0,0,0,0,
60,58,91,92,39,61,34,0,97,98,99,100,101,102,103,104,105,0,0,0,0,0,0,0,
106,107,108,109,110,111,112,113,114,0,0,0,0,0,0,0,0,115,116,117,118,
119,120,121,122,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,123,
65,66,67,68,69,70,71,72,73,0,0,0,0,0,0,125,74,75,76,77,78,79,80,81,82,
0,0,0,0,0,0,0,0,83,84,85,86,87,88,89,90,0,0,0,0,0,0,48,49,50,51,52,53,54,
55,56,57,0,0,0,0,0,0
   )+6 shift 12;

   end proc. ebcdictable;




   procedure err(s,p,i);
   value i; string s; long array p; integer i;

   begin
      write(out,<:*** :>,progname,<:: :>,s,p);
      if i>0 then write(out,i);
      outchar(out,'nl');
      goto END;
   end;


   integer procedure getpar(no,par);
   integer no; long array par;

   begin
      getpar:=system(4,no,par);
      no:=no+1;
   end;



   conv:=lrecl:=pno:=0;
   bfactor:=1;
   trunc:=rewind:=unload:=scan:=false;
   suspend:=true;
   empty(1):=empty(2):=fname(1):=fname(2):=tname(1):=tname(2):=0;

   if getpar(pno,progname) shift (-12)>2 then
   begin
      getpar(pno,progname);
      err(<:left-side not allowed:>,empty,-1);
   end;

   wr:=progname(1)=long <:magwr:> add 'i';

   for spec:=getpar(pno,la) while spec<>0 do
   begin
      if spec=4 shift 12+10 then else
      if spec extract 12=4 then err(<:illegal param: :>,empty,la(1)) else
                                err(<:illegal param: :>,la,-1);

      if la(1)=long <:lrecl:> then
      begin
         if getpar(pno,la)<>8 shift 12+4 or la(1)=0 then
            err(<:lrecl ill. argument:>,empty,-1);
         lrecl:=la(1);
      end else

      if la(1)=long <:bfact:> add 'o' then
      begin
         if getpar(pno,la)<>8 shift 12+4 or la(1)=0 then
            err(<:bfactor ill. argument:>,empty,-1);
         bfactor:=la(1);
      end else

      if la(1)=long <:conv:> then
      begin
         if getpar(pno,la)<>8 shift 12+10 then
            err(<:conv argument missing:>,empty,-1);
         if la(1)=long <:ascii:> then conv:=0 else
         if la(1)=long <:ebcdi:> add 'c' then conv:=1 else
            err(<:conv unknown: :>,la,-1);
      end else

      if la(1)=long <:trunc:> then
      begin
         if getpar(pno,la)<>8 shift 12+10 then
            err(<:trunc argument missing:>,empty,-1);
         if la(1)=long <:yes:> then trunc:=true else
         if la(1)=long <:no:> then trunc:=false else
            err(<:trunc argument must be yes or no:>,empty,-1);
      end else

      if la(1)=long <:file:> then
      begin
         if getpar(pno,fname)<>8 shift 12+10 then
            err(<:file-argument missing:>,empty,-1);
      end else

      if la(1)=long <:tape:> then
      begin
         if getpar(pno,tname)<>8 shift 12+10 then
            err(<:tape argument missing:>,empty,-1);
         if getpar(pno+0,la)=8 shift 12+10 then
         begin
            if la(1)=long <:scan:> then scan:=true else
               err(<:scan bad argument:>,la,-1);
            pno:=pno+1;
         end else
         if getpar(pno,la)<>8 shift 12+4 or la(1)<0 then
            err(<:filenumber missing or illegal:>,empty,-1);
         fileno:=la(1);
      end else
     
      if la(1)=long <:suspe:> add 'n' or
         la(1)=long <:relea:> add 's' then
      begin
         if getpar(pno,la)<>8 shift 12+10 then
            err(<:yes/no missing:>,empty,-1); 
         if la(1)=long <:no:> then suspend:=false else
         if la(1)=long <:yes:> then suspend:=true else
            err(<:bad param:>,la,-1);
      end else

      if la(1)=long <:rewin:> add 'd' then
      begin
         if getpar(pno,la)<>8 shift 12+10 then
            err(<:yes/no missing:>,empty,-1); 
         if la(1)=long <:no:> then rewind:=false else
         if la(1)=long <:yes:> then rewind:=true else
            err(<:bad param:>,la,-1);
      end else

      if la(1)=long <:unloa:> add 'd' then
      begin
         if getpar(pno,la)<>8 shift 12+10 then
            err(<:yes/no missing:>,empty,-1); 
         if la(1)=long <:no:> then unload:=false else
         if la(1)=long <:yes:> then unload:=true else
            err(<:bad param:>,la,-1);
      end else

            err(<:ill. param: :>,la,-1);

   end;



   if fname(1)=0 and -,scan then err(<:no file-param:>,empty,-1);
   if tname(1)=0 then err(<:no tape-param:>,empty,-1);
   if lrecl=0 and -,scan then err(<:no lrecl-param:>,empty,-1);


   chperbl:=if scan then 16*768 else lrecl*bfactor;
   blsize:=(chperbl+2)//3*2;
   trail:=3-chperbl mod 3;
   if trail=3 then trail:=0;

   begin
      zone zf(256,2,stderror),zt((blsize+3)//2,2,tproc);
      integer array alpha(0:255),ia(1:20),alpha1(0:(if wr then 127 else 1)),
                    kind(1:(if wr then (lrecl+5)//6+3 else 1));
      integer hw,pos,chrs,sh,i,j,ch,bl,recs;
      boolean eof,eot;
      long array rec(1:(lrecl+5)//6+3);
      integer field last;
      long field last1;


      procedure tproc(z,s,b);
      zone z; integer s,b;

      begin
         integer array ia(1:8);

         if false add s then stderror(z,s,b);
         eof:=s shift (-16) extract 1=1;
         eot:=s shift (-18) extract 1=1;
         if eot then b:=2 else <* or RS keeps retrying *>
         begin
            system(14,0,ia);
            chrs:=ia(3);
         end;
      end;



      for i:=0 step 1 until 255 do alpha(i):=0;

      if conv=0 then
      begin
         for i:=0 step 1 until 127 do alpha(i):=2 shift 12+i;
      end else

      if conv=1 then
      begin
         if wr then
         begin
            integer array a(0:255);
            ebcdictable(a);
            for i:=0 step 1 until 255 do 
             if a(i) extract 12<>0 then alpha(a(i) extract 12):=a(i) shift (-12) shift 12+i;
         end else
         ebcdictable(alpha);
      end;

      if wr then
      begin
         alpha1(0):=alpha1(127):=0;
         for i:=1 step 1 until 126 do alpha1(i):=6 shift 12+i;
         alpha1('nl'):=8 shift 12+'nl';
         alpha1('em'):=8 shift 12+'em';
         intable(alpha1);
      end;
      
      if scan then fileno:=0;

      open(zf,4,fname,0);
      open(zt,18+(if wr then trail else 0) shift 16,tname,1 shift 1+1 shift 7+1 shift 18);
      setposition(zt,fileno,0);
      eof:=eot:=false;
      recs:=0;
      
      if scan then
      begin
         long recs,chrtot;
         
         repeat
            recs:=chrtot:=0;
            write(out,<:File :>,fileno,"nl",1);
            for hw:=inrec6(zt,0) while -,eof and -,eot do
            begin
               inrec6(zt,hw);
               write(out,<< ddddd>,chrs,"nl",if recs mod 10=9 then 1 else 0);
               recs:=recs+1;
               chrtot:=chrtot+chrs;
            end;
            write(out,"nl",if recs mod 10=0 then 0 else 1,
                  <:Total: :>,recs,<: blocks:>,chrtot,<: bytes<10><10>:>);
            if -,eot then
            begin
               fileno:=fileno+1;
               setposition(zt,fileno,0);
            end;
         until eot;
      end else

      if -,wr then
      begin  <* magread *>
         last:=(lrecl+2)//3*2+(if lrecl mod 3=0 then 2 else 0);
         last1:=last+4;
         sh:=case lrecl mod 3 +1 of(24,16,8);

         for hw:=inrec6(zt,0) while -,eof do
         begin  <* eof,chrs s{ttes af blokproc. (tproc) *>
            inrec6(zt,hw);
            pos:=1;

            while chrs>0 do
            begin
               chrs:=chrs-lrecl;
               if chrs<0 then 
                  write(out,<:warning: block length not multiple of lrecl<10>:>) else
               begin
                  gettext(zt,pos,alpha,rec,lrecl);
                  rec.last:=rec.last shift (-sh) shift sh;
                  rec.last1:=0;
                  if -,trunc then rec.last:=rec.last+'nl' shift (sh-8) else
                  begin
                    i:=lrecl+1;
                    repeat
                       i:=i-1;
                       getchar(rec,i+0,j);
                    until i=1 or j<>'sp';
                    if j<>'sp' then i:=i+1;
                    putchar(rec,i,'nl');
                    putchar(rec,i,0,6);
                  end;

                  write(zf,rec);
                  recs:=recs+1;
               end;
            end;
         end;

         outchar(zf,'em');
         write(out,"nl",1,progname,":",1,recs,<: records read from tape<10>:>);

      end else

      begin  <* magwrite *>
         bl:=-1;
         pos:=chperbl+1;

         repeat
            i:=readall(zf,rec,kind,1);
            if i<0 then repeatchar(zf);

            if i=1 then ch:=0 else
            begin
               last1:=(abs i -1) shift 2;
               for j:=-48,j while rec.last1 shift j extract 8<>0 do j:=j+8;
               ch:=(abs i -2)*6+j//8+5;

               if ch>lrecl then
               begin
                  write(out,<:warning: line truncated<10>:>);
                  repeat readchar(zf,j) until j='nl' or j='em';
                  if j='em' then repeatchar(zf);
                  ch:=lrecl;
               end;
            end;

            if i<>1 or rec(1)<>'em' then
            begin

               if pos=chperbl+1 then
               begin
                  bl:=bl+1;
                  outrec6(zt,blsize);
                  pos:=1;
               end;

               puttext(zt,pos,alpha,rec,ch);
               if ch<lrecl then putchar(zt,pos,alpha,'sp',lrecl-ch);
               recs:=recs+1;
            end;

            until rec(i)='em';

            hw:=(pos+1)//3*2;

            if pos-1<chperbl then
            begin  <* sidste blok skal afkortes *>
               array save(1:(hw+3)//4);

               tofrom(save,zt,hw);
               close(zt,false);
               getzone6(zt,ia);
               trail:=3-(pos-1) mod 3;
               if trail=3 then trail:=0;
               ia(1):=ia(1) extract 16+trail shift 16;
               open(zt,ia(1),tname,1 shift 1+1 shift 7);
               setposition(zt,fileno,bl);
               outrec6(zt,hw);
               tofrom(zt,save,hw);
            end;

            write(out,"nl",1,progname,":",1,recs,<: records written to tape<10>:>);
      end;

      close(zf,true);

      if unload then setposition(zt,-1,0) else
      if rewind then setposition(zt,0,0);
      close(zt,suspend);

   end;

END:
   intable(0);
   trapmode:=-1;

end
